#!/usr/bin/env python
#
#  Algorithmic art generator
#  Create patterns from user-defined algorithms
# 
#
# Zack Marotta  (c)

import PIL
import numpy
import sys
import os.path
from libalgart.parser import *
from libalgart.user import *


helpstring = """Usage:
 
 ./algart -c gray -s <height>x<width> -d <color-depth> [-f color] [-b color] [-i] [-v] [-a algorithm] [- file]
 ./algart -c rgb|hsv|hsl|cymk -s <height>x<width> -d <color-depth> [-a algorithm] [file]
 
 Arguments:
 * = required
 *  -c gray|rgb|hsv|hsl|cymk   Color mode
 *  -s                         Size of image (height x width)
 *  -d                         Color depth (bit depth of color: 1-bit = 2 colors, 8-bit = 256 colors)
    -f                         Foreground color (grayscale mode only)
    -b                         Background color (grayscale mode only)
    -v                         Verbose mode (for debugging)
    -a                         Algorithm to apply
    - file                     Filename of algorithm

 Modes:
  MODES   REQUIRED VARIABLES    DESCRIPTIONS (assuming max = 255, hue = red)
  gray  - K                   - Grayscale (0 = white, 255 = black)
  hsv   - H, S, V             - Hue, Saturation (0 = white, 255 = red), Value      (0 = black, 255 = white)
  hsl   - H, S, L             - Hue, Saturation (0 = gray , 255 = red), Luminosity (0 = black, 255 = white)
  cymk  - C, Y, M, K          - Cyan, Yellow, Magenta, Key

 Syntax:
    +, -, *, /, %               Arithmetic operators
    ^                           Exponent operator
    (...)                       Parentheses
    {..., ..., ...}[...]        Array definition and index
    <, >, <=, >=, ==, !=        Evaluation (evaluates to 0 (false) or 1 (true)
    ... ? ... : ...             Boolean operators
    =                           Variable assignment
    | ... |                     Absolute value
    (~)&&, (E)(~)||             *Bitwise* expressions (NOT LOGICAL, BE CAREFUL!)
    (N)AND, (X)(N)OR            *Logical* expressions (error if calculating non-boolean values)
    //                          Comment
    
 Built-in functions:
    FAC()   Factorial
    COS()   Cosine
    SIN()   Sine
    TAN()   Tangent
    
 Read-only variables:
    x - pixel X coordinate (origin 0,0)
    y - pixel Y coordinate (origin 0,0)
    p - pixel number (if 256x256 image, 0 - 65536)

 Read-only constants:
    MAX = Total number of pixels
    ROWS = Total rows of pixels (height)
    COLS = Total columns of pixels (width)
    MVAL = Max color value (e.g.: 8-bit = 256 colors, therefore range is 0-255, so MVAL = 255)

 Example usage:
    ./algart.py -c gray -s 256x256 -d 8 -a "rate = DEPTH / MAX; k = p * rate"
 or using file instead:   
    ./algart.py -c gray -s 256x256 -d 8 - algo.txt
    
    algo.txt:
      //This is my file!
      rate = MVAL / MAX
      k = p * rate
"""



def main():
    # ./algart.py -c gray -s <height>x<width> -d <color-depth> [-f color] [-b color] [-a <algorithm>]
    global helpstring
    args = sys.argv
    if "-v" in args:
        verbose = True
    else:
        verbose = False
    if len(args) == 1:
        print(helpstring)
    if "-s" in args:
        dimensions = args[args.index("-s")+1]
        try:
            width, height = map(int, dimensions.split("x"))
        except ValueError:
            err("ValueError: Invalid -s value, should be format \"WIDTHxHEIGHT\"")
    else:
        err("MissingArgument: \"-s <height>x<width>\"  Size of image (height x width)")
    if "-d" in args:
        depth = int(args[args.index("-d")+1])
    else:
        err("MissingArgument: \"-d w<depth>\" Color depth")
    if "-" in args:
        algfile = args[args.index("-")+1]
        if os.path.isfile(algfile):
            fopen = open(algfile, "r")
            alg = fopen.read()
        else:
            err("File \"{}\" not found".format(algfile))
    elif "-a" in args:
        alg = args[args.index("-a")+1]
    else:
        err("Missing argument: \"-a algorithm\", or \"- file\"")
    
    if "-c" in args:
        colormode = args[args.index("-c")+1]
    else:
        err("MissingArgument: Color mode (-c gray|rgb|hsv|hsl|cymk)")

    modes = {"gray": ParserGray, "rgb": ParserRGB, "hsv": ParserHSV, "hsl": ParserHSL, "cymk": ParserCYMK} 
    if colormode not in modes:
        err("ValueError: Invalid color mode (-c gray|rgb|hsv|hsl|cymk)")
    
    fgcolorval = "Default"
    bgcolorval = "Default"
    if colormode == "gray":
        if "-f" in args:
            fgcolorval = int(args[args.index("-f")+1])
        if "-b" in args:
            bgcolorval = int(args[args.index("-b")+1])

    if verbose:
        print("Mode:{}\tSize:{}\tPixels:{}\tBit-depth:{}\tMax color value:{}\tCustom fg/bg color:({}, {})\nRequired variables: {}\nAlgorithm:\n{}".format(colormode, dimensions, width*height, depth, 2**depth-1, str(fgcolorval), str(bgcolorval), parse.reqvars, alg))
    
    
    parse = modes[colormode](width, height, depth, alg, verbose)
    parse.crunch()


if __name__ == '__main__':
    main()
